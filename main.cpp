#include <iostream>
#include <memory>
#include <string>
#include <random>
#include <algorithm>
#include <vector>
#include <utility>
#include <ostream>
#include "bignum.h"

void check(const std::string& test_group, const std::string& a, const std::string& b) {
    if (a != b) {
        std::cout << "Failed on " + test_group << std::endl << a << " != " << b << std::endl;
        exit(0);
    }
}

void check(const std::string& test_group, bool a, bool b) {
    if (a != b) {
        std::cout << "Failed on " + test_group << std::endl << a << " != " << b << std::endl;
        exit(0);
    }
}

void check_prefix(const std::string& test_group, const std::string& a, int pref_len) {
    std::string pi = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095";
    //50582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361603563707660104710181942955596198946767837449448255379774726847040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636807426542527862551818417574672890977772793800081647060016145249192173217214772350141441973568548161361157352552133475741849468438523323907394433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264995813390478027590099465764078951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451749399651431298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684739452267467678895252138522549954666727823986456596116354886230577456498035593634568174324112515076069479451096596094025228879710893145669136672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780478489683321445713868751943506430218453191048481005370614680674919278191197939952061419663428754440643745123718192179998391015919561814675142691239748940907186494231961";
    for (int i = 0; i < pref_len; i++) {
        if (pi[i] != a[i]) {
            std::cout << "wrring digit pos " << i << std::endl;
            exit(0);
        }
    }
}

void tests() {
    check("constre1", "100.01", BigNum("100.01").ToString());
    check("constre2", "0", BigNum("0").ToString());
    check("constre3", "0", BigNum().ToString());
    check("constre4", "100", BigNum(BigNum("100")).ToString());
    check("constre5", "-100", BigNum(BigNum("-100")).ToString());

    check("equa1", 1, BigNum("100") > BigNum("0.01"));
    check("equa2", 0, BigNum("100") > BigNum("100"));
    check("equa3", 1, BigNum("0") == BigNum("-0"));
    check("equa4", 0, BigNum("10.0") == BigNum("1.00"));
    check("equa5", 1, BigNum("0") == BigNum("0"));

    check("summe1", "100.01", (BigNum("100") + BigNum("0.01")).ToString());
    check("summe2", "1000", (BigNum("100") + BigNum("900")).ToString());
    check("summe3", "1", (BigNum("0,100") + BigNum("0.900")).ToString());
    check("summe4", "-1", (BigNum("-10") + BigNum("9")).ToString());
    check("summe5", "1", (BigNum("-10") + BigNum("11")).ToString());

    check("substre1", "1", (BigNum("100") - BigNum("99")).ToString());
    check("substre2", "100", (BigNum("100") - BigNum("0")).ToString());
    check("substre3", "-1", (BigNum("98") - BigNum("99")).ToString());
    check("substre4", "9", (BigNum("98") - BigNum("89")).ToString());
    check("substre5", "-1235299340.466529055", (BigNum("124126.645783445") - BigNum("1235423467.1123125")).ToString());

    check("multe1", "153348971094805.5270083681665625", (BigNum("124126.645783445") * BigNum("1235423467.1123125")).ToString());
    check("multe2", "-153348971094805.5270083681665625", (BigNum("-124126.645783445") * BigNum("1235423467.1123125")).ToString());
    check("multe3", "-153348971094805.5270083681665625", (BigNum("124126.645783445") * BigNum("-1235423467.1123125")).ToString());
    check("multe4", "153348971094805.5270083681665625", (BigNum("-124126.645783445") * BigNum("-1235423467.1123125")).ToString());
    check("multe5", "0", (BigNum("0") * BigNum("-1235423467.1123125")).ToString());

    check("divae0", "0.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", (BigNum("1") / BigNum("3")).ToString());
    check("divae1", "50", (BigNum("100") / BigNum("2")).ToString());
    check("divae2", "-0.00010047295448707923183651967473462351191631330475439241592435470694073833063810364405212320973128796169051135629968929778763150671333867126733003079930000707672620076205431880217941037340698739733161287597363829973873302542713764646476041326599359156018289779491209736864172344905313866369046344481", (BigNum("-124126.645783445") / BigNum("1235423467.1123125")).ToString());

    check_prefix("PI", BigNum::PI().ToString(), 100);

    std::cout << "suc\n";
}

int main() {
    tests();
    // std::cout << BigNum::PI();
}
